// Generated from IpCheck.g4 by ANTLR 4.9.3
// jshint ignore: start
import antlr4 from 'antlr4';



const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0002\no\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0005\u0004.\n\u0004\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005;\n\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006H\n\u0006\u0003",
    "\u0007\u0003\u0007\u0005\u0007L\n\u0007\u0003\b\u0003\b\u0003\t\u0003",
    "\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0005\n]\n\n\u0003\u000b\u0003\u000b\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\r\u0005\rf\n\r\u0003\r\u0003\r\u0006\rj\n\r",
    "\r\r\u000e\rk\u0003\r\u0003\r\u0002\u0002\u000e\u0003\u0003\u0005\u0002",
    "\u0007\u0002\t\u0002\u000b\u0002\r\u0004\u000f\u0005\u0011\u0006\u0013",
    "\u0007\u0015\b\u0017\t\u0019\n\u0003\u0002\f\u0003\u00022;\u0003\u0002",
    "23\u0003\u000228\u0003\u0002:;\u0003\u00025:\u0003\u00024;\u0003\u0002",
    "25\u0003\u00026;\u0003\u000256\u0003\u000227\u0002w\u0002\u0003\u0003",
    "\u0002\u0002\u0002\u0002\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003",
    "\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003",
    "\u0002\u0002\u0002\u0002\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003",
    "\u0002\u0002\u0002\u0002\u0019\u0003\u0002\u0002\u0002\u0003\u001b\u0003",
    "\u0002\u0002\u0002\u0005\u001d\u0003\u0002\u0002\u0002\u0007-\u0003",
    "\u0002\u0002\u0002\t:\u0003\u0002\u0002\u0002\u000bG\u0003\u0002\u0002",
    "\u0002\rK\u0003\u0002\u0002\u0002\u000fM\u0003\u0002\u0002\u0002\u0011",
    "O\u0003\u0002\u0002\u0002\u0013\\\u0003\u0002\u0002\u0002\u0015^\u0003",
    "\u0002\u0002\u0002\u0017`\u0003\u0002\u0002\u0002\u0019i\u0003\u0002",
    "\u0002\u0002\u001b\u001c\u00070\u0002\u0002\u001c\u0004\u0003\u0002",
    "\u0002\u0002\u001d\u001e\t\u0002\u0002\u0002\u001e\u0006\u0003\u0002",
    "\u0002\u0002\u001f \u0005\u0005\u0003\u0002 !\u0005\u0005\u0003\u0002",
    "!.\u0003\u0002\u0002\u0002\"#\u00072\u0002\u0002#$\u0005\u0005\u0003",
    "\u0002$%\u0005\u0005\u0003\u0002%.\u0003\u0002\u0002\u0002&\'\u0007",
    "3\u0002\u0002\'(\t\u0003\u0002\u0002(.\u0005\u0005\u0003\u0002)*\u0007",
    "3\u0002\u0002*+\u00074\u0002\u0002+,\u0003\u0002\u0002\u0002,.\t\u0004",
    "\u0002\u0002-\u001f\u0003\u0002\u0002\u0002-\"\u0003\u0002\u0002\u0002",
    "-&\u0003\u0002\u0002\u0002-)\u0003\u0002\u0002\u0002.\b\u0003\u0002",
    "\u0002\u0002/0\u00073\u0002\u000201\u00074\u0002\u000212\u0003\u0002",
    "\u0002\u00022;\t\u0005\u0002\u000234\u00073\u0002\u000245\t\u0006\u0002",
    "\u00025;\u0005\u0005\u0003\u000267\u00073\u0002\u000278\u0007;\u0002",
    "\u000289\u0003\u0002\u0002\u00029;\t\u0003\u0002\u0002:/\u0003\u0002",
    "\u0002\u0002:3\u0003\u0002\u0002\u0002:6\u0003\u0002\u0002\u0002;\n",
    "\u0003\u0002\u0002\u0002<=\u00073\u0002\u0002=>\u0007;\u0002\u0002>",
    "?\u0003\u0002\u0002\u0002?H\t\u0007\u0002\u0002@A\u00074\u0002\u0002",
    "AB\t\u0003\u0002\u0002BH\u0005\u0005\u0003\u0002CD\u00074\u0002\u0002",
    "DE\u00074\u0002\u0002EF\u0003\u0002\u0002\u0002FH\t\b\u0002\u0002G<",
    "\u0003\u0002\u0002\u0002G@\u0003\u0002\u0002\u0002GC\u0003\u0002\u0002",
    "\u0002H\f\u0003\u0002\u0002\u0002IL\u0005\u0015\u000b\u0002JL\u0005",
    "\u0007\u0004\u0002KI\u0003\u0002\u0002\u0002KJ\u0003\u0002\u0002\u0002",
    "L\u000e\u0003\u0002\u0002\u0002MN\u0005\t\u0005\u0002N\u0010\u0003\u0002",
    "\u0002\u0002OP\u0005\u000b\u0006\u0002P\u0012\u0003\u0002\u0002\u0002",
    "QR\u00074\u0002\u0002RS\u00074\u0002\u0002ST\u0003\u0002\u0002\u0002",
    "T]\t\t\u0002\u0002UV\u00074\u0002\u0002VW\t\n\u0002\u0002W]\u0005\u0015",
    "\u000b\u0002XY\u00074\u0002\u0002YZ\u00077\u0002\u0002Z[\u0003\u0002",
    "\u0002\u0002[]\t\u000b\u0002\u0002\\Q\u0003\u0002\u0002\u0002\\U\u0003",
    "\u0002\u0002\u0002\\X\u0003\u0002\u0002\u0002]\u0014\u0003\u0002\u0002",
    "\u0002^_\u0005\u0005\u0003\u0002_\u0016\u0003\u0002\u0002\u0002`a\u0007",
    "\u000b\u0002\u0002ab\u0003\u0002\u0002\u0002bc\b\f\u0002\u0002c\u0018",
    "\u0003\u0002\u0002\u0002df\u0007\u000f\u0002\u0002ed\u0003\u0002\u0002",
    "\u0002ef\u0003\u0002\u0002\u0002fg\u0003\u0002\u0002\u0002gj\u0007\f",
    "\u0002\u0002hj\u0007\u000f\u0002\u0002ie\u0003\u0002\u0002\u0002ih\u0003",
    "\u0002\u0002\u0002jk\u0003\u0002\u0002\u0002ki\u0003\u0002\u0002\u0002",
    "kl\u0003\u0002\u0002\u0002lm\u0003\u0002\u0002\u0002mn\b\r\u0002\u0002",
    "n\u001a\u0003\u0002\u0002\u0002\u000b\u0002-:GK\\eik\u0003\b\u0002\u0002"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class IpCheckLexer extends antlr4.Lexer {

    static grammarFileName = "IpCheck.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'.'" ];
	static symbolicNames = [ null, null, "IP_A", "IP_B", "IP_C", "OCTETO", 
                          "DIGIT", "WHITESPACE", "NEWLINE" ];
	static ruleNames = [ "T__0", "NUMBER", "A", "B", "C", "IP_A", "IP_B", "IP_C", 
                      "OCTETO", "DIGIT", "WHITESPACE", "NEWLINE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

IpCheckLexer.EOF = antlr4.Token.EOF;
IpCheckLexer.T__0 = 1;
IpCheckLexer.IP_A = 2;
IpCheckLexer.IP_B = 3;
IpCheckLexer.IP_C = 4;
IpCheckLexer.OCTETO = 5;
IpCheckLexer.DIGIT = 6;
IpCheckLexer.WHITESPACE = 7;
IpCheckLexer.NEWLINE = 8;



